#include<stdio.h> 
#include<stdbool.h> 
#define P 5
#define R 4

void calculateNeed(int need[P][R], int max[P][R], int alloc[P][R]) { 
 for (int i = 0; i < P; i++) { 
 for (int j = 0; j < R; j++) { 
 need[i][j] = max[i][j] - alloc[i][j]; 
 } 
 } 
} 
isSafe(int processes[], int avail[], int max[][R], int alloc[][R]) { 
 int need[P][R]; 
 calculateNeed(need, max, alloc); 
 bool finish[P] = {0}; 
 int safeSeq[P]; 
 int work[R]; 
 for (int i = 0; i < R; i++) { 
 work[i] = avail[i]; 
 } 
 int count = 0; 
 while (count < P) { 
 bool found = false; 
 for (int p = 0; p < P; p++) { 
 if (!finish[p]) { 
 int j; 
 for (j = 0; j < R; j++) { 
 if (need[p][j] > work[j]) 
 break; 
 } 
 if (j == R) { 
for (int k = 0; k < R; k++) 
 work[k] += alloc[p][k]; 
 safeSeq[count++] = p; 
 finish[p] = 1; 
 found = true; 
 } 
 } 
 } 
 if (!found) { 
 printf("System is not in safe state\n"); 
 return false; 
 } 
 } 
 printf("System is in safe state.\nSafe sequence is: "); 
 for (int i = 0; i < P; i++) { 
 printf("P%d ", safeSeq[i]); 
 } 
 printf("\n"); 
 return true; 
} 
int main() { 
 int processes[] = {0, 1, 2, 3, 4}; 
 int alloc[P][R] = { }; 
 int max[P][R] = {};
int avail[] = {1, 5, 2, 0}; 
 isSafe(processes, avail, max, alloc); 
 return 0; 
} 